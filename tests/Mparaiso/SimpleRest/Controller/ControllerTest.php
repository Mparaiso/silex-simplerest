<?php
namespace Mparaiso\SimpleRest\Controller;

use Mock\ModelMock;
use Mock\RestResponse;
use Mock\RestServiceMock;
use Silex\Application;
use Silex\WebTestCase;
use Symfony\Component\Serializer\Serializer;


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1-7-gef8c3c6 on 2014-08-17 at 03:57:20.

 */
class ControllerTest extends WebTestCase

{
    /**
     * @var \Silex\Application
     */
    protected $app;
    protected $restServiceMock;

    /**
     * @return array
     */
    public function makeContentType()
    {
        return array(
            array('xml'),
            array('json')
        );
    }

    /**
     * @return \PHPUnit_Framework_MockObject_MockObject|\Mock\RestServiceMock
     */
    private function getRestServiceMock()
    {
        if (NULL == $this->restServiceMock) {
            $this->restServiceMock = $this->getMock('\Mock\RestServiceMock',
                array('findAllResource', 'updateResource', 'findOneResourceBy',
                    'findResourceBy', 'deleteResource', 'findResource', 'createResource'));
        }
        return $this->restServiceMock;

    }

    /**
     * @covers Mparaiso\SimpleRest\Controller\Controller::__get
     */

    public function test__get()

    {

        $controller = new Controller(array('resource' => 'resource',
            'model' => '\Mock\ModelMock',
            'service' => new RestServiceMock()));

        $this->assertEquals('resource', $controller->resource);

    }


    /**
     * @covers       Mparaiso\SimpleRest\Controller\Controller::index
     * @dataProvider makeContentType
     */
    public function testIndex($_format)
    {
        $restMock = $this->getRestServiceMock();
        $restMock->expects($this->once())
            ->method('findResourceBy')
            ->with($this->isInstanceOf('ArrayObject'));
        $client = $this->createClient();
        $crawler = $client->request('GET', "/resource.$_format");
    }


    /**
     * @covers       Mparaiso\SimpleRest\Controller\Controller::read
     * @dataProvider makeContentType
     */

    public function testRead($_format)

    {
        $id = 10;
        $resource = new ModelMock();
        $resource->setId($id);
        $restMock = $this->getRestServiceMock();
        $restMock->expects($this->once())
            ->method('findResource')
            ->with($this->equalTo($id))
            ->willReturn($resource);
        /* @var Serializer $serializer */
        $serializer = $this->app['serializer'];
        $client = $this->createClient();
        $crawler = $client->request('GET', "/resource/10.$_format");
        $response = $client->getResponse();
        $responseContent = $response->getContent();
        $this->assertEquals($resource, $serializer->deserialize($responseContent, '\Mock\ModelMock', $_format));
    }


    /**
     * @covers       Mparaiso\SimpleRest\Controller\Controller::create
     * @dataProvider makeContentType
     */

    public function testCreate($_format)

    {
        $title = "foo";
        $id = 5;
        $resource = new ModelMock();
        $resource->setTitle($title);
        $restMock = $this->getRestServiceMock();
        $restMock->expects($this->once())->method('createResource')
            ->with($resource)
            ->willReturn($resource);
        /* @var Serializer $serializer */
        $serializer = $this->app['serializer'];
        $client = $this->createClient();
        $client->request('POST', "/resource.$_format", array(), array(), array(), $serializer->serialize($resource, $_format));
        $responseContent = $client->getResponse()->getContent();
        $this->assertEquals($resource, $serializer->deserialize($responseContent, '\Mock\ModelMock', $_format));
    }


    /**
     * @covers       Mparaiso\SimpleRest\Controller\Controller::update
     * @dataProvider makeContentType
     */

    public function testUpdate($_format)

    {

        $title = "foo";
        $id = 5;
        $resource = new ModelMock();
        $resource->setTitle($title);
        $resource->setId($id);
        $restMock = $this->getRestServiceMock();
        $restMock->expects($this->once())->method('findResource')
            ->with($id)
            ->willReturn($resource);
        $restMock->expects($this->once())->method('updateResource')
            ->with($resource)
            ->willReturn($resource);
        /* @var Serializer $serializer */
        $serializer = $this->app['serializer'];
        $client = $this->createClient();
        $client->request('PUT', "/resource/{$id}.{$_format}", array(), array(), array(), $serializer->serialize($resource, $_format));
        $responseContent = $client->getResponse()->getContent();
        $this->assertEquals($resource, $serializer->deserialize($responseContent, '\Mock\ModelMock', $_format));


    }


    /**
     * @covers       Mparaiso\SimpleRest\Controller\Controller::delete
     * @dataProvider makeContentType
     */

    public function testDelete($_format)

    {


        $title = "foo";
        $id = 5;
        $resource = new ModelMock();
        $resource->setTitle($title);
        $resource->setId($id);
        $deleteResourceResult = new RestResponse();
        $deleteResourceResult->setMessage(1);
        $restMock = $this->getRestServiceMock();
        $restMock->expects($this->once())->method('findResource')
            ->with($this->equalTo($id))
            ->willReturn($resource);
        $restMock->expects($this->once())->method('deleteResource')
            ->with($resource)
            ->willReturn($deleteResourceResult);
        /* @var Serializer $serializer */
        $serializer = $this->app['serializer'];
        $client = $this->createClient();
        $client->request('DELETE', "/resource/{$id}.{$_format}", array(), array(), array(), $serializer->serialize($resource, 'json'));
        $responseContent = $client->getResponse()->getContent();
        $this->assertEquals($deleteResourceResult, $serializer->deserialize($responseContent, '\Mock\RestResponse', $_format));
    }


    /**
     * @covers Mparaiso\SimpleRest\Controller\Controller::connect
     */

    public function testConnect()

    {

        $controller = new Controller(array(
            'service' => new RestServiceMock(),
            'resource' => 'resource',
            'model' => '\Mock\Model'
        ));
        $controllers = $controller->connect($this->app);
        $this->assertInstanceOf('\Silex\ControllerCollection', $controllers);
    }


    /**
     * @covers Mparaiso\SimpleRest\Controller\Controller::addChild
     */

    public function testAddChild()

    {

        $restService1 = new RestServiceMock();
        $restService2 = new RestServiceMock();
        $controller = new Controller(array('service' => $restService1, 'resource' => 'resource'));
        $childController = new Controller(array('service' => $restService2, 'resource' => 'resource'));
        $controller->addChild($childController);
        $this->assertEquals($controller, $childController->parent);
        $this->assertCount(1, $controller->children);

    }

    /**
     * Creates the application.
     *
     * @return Application
     */
    public function createApplication()
    {
        $restMock = $this->getRestServiceMock();
        $app = \BootStrap::getApplication(FALSE);
        $app['rest_service'] = $app->share(function () use ($restMock) {
            return $restMock;
        });
        $app->mount('/', $app['rest_controller']);
        $app->boot();
        return $app;
    }
}

